{
    "label.EN": "English",
    "label.PL": "Polish",
    "label.example": "Example",
    "label.menu.demo": "Demo examples",
    "label.menu.newLanguage": "How to add need language",
    "label.language.select": "Select language",
    "label.menu.home": "Home",
    "label.menu.projectBuild": "How to build a project",
    "label.menu.methods": "Methods",
    "label.menu.simpleView": "Simple view",
    "label.menu.complexView": "Complex view",
    "label.menu.handlebars": "Handlebars templates",
    "label.menu.jsonView": "JSON view",
    "label.menu.multipleComponents": "Multiple components",
    "label.toJson": "$.toJson sample",
    "label.email": "Email",
    "label.password": "Password",
    "label.submit": "Submit",
    "label.cancel": "Cancel",
    "label.legend": "Legend",
    "label.rememberMe": "Remember me",
    "label.testTextArea": "Some textarea",
    "label.radioButtons": "Radio buttons",
    "label.option1": "Option 1",
    "label.option2": "Option 2",
    "label.selectBoxes": "Select boxes",
    "label.toJsonResult": "toJSON result:",
    "label.menu.about": "About",
    "label.welcome.slogan": "Welcome on hyperion.js website!",
    "label.welcome.text1": "hyperion.js is a technology stack that will help you to create a single page application in <strong>easy way</strong>. hyperion.js is using all the best out there. After detailed investigation of many available frameworks we found this unique technology stack that is working perfectly for desktop and mobile applications.",
    "label.welcome.criteria": "Our criteria:",
    "label.welcome.reusableCode.title": "Reusable code",
    "label.welcome.reusableCode.text": "In case we want to change our library in a future we wanted to choose something that will allow use to reuse most of the code.",
    "label.welcome.stability.title": "Stability",
    "label.welcome.stability.text": "How long product is currently on a market. When was the release of a stable version. How many bugs are there. If there are any major changes incoming.",
    "label.welcome.support.title": "Support",
    "label.welcome.support.text": "Quality of documentation. How many thread on stackoverflow are there.",
    "label.welcome.reason.title": "Reason",
    "label.welcome.reason.text": "Don’t go with the trends go with stability. Year ago Ember was number one. Right now it’s Angular. Which one will be next year?",
    "label.welcome.flexibility.title": "Flexibility",
    "label.welcome.flexibility.text": "There are hundreds of awesome plug-ins and libraries out there that do specialized things. They usually do these things better than what comes bundle with a framework. So it important to be able to integrate these libraries with the chosen MVC framework.",
    "label.welcome.size.title": "Size",
    "label.welcome.size.text": "Size matters – always. Sometimes size need to be smaller sometimes bigger :).",
    "label.welcome.createApp": "Create a single page responsive application in 5 minutes",
    "label.welcome.adv.1.title": "No Page Refresh",
    "label.welcome.adv.1.text": "This much is obvious, but are the benefits as immediately clear to designer? There’s a reason single-page sites are fast becoming standard on mobile. A site without page refreshing is like a buffet without a line – users get to exactly what they want when they want. Responsiveness increases tremendously, and backend maintenance becomes easier, too.",
    "label.welcome.adv.2.title": "Quality Over Quantity",
    "label.welcome.adv.2.text": "With the burden of page-by-page design and optimization removed, developers can focus on a single, quality page. After all, let’s not kid ourselves – good design takes time and focus. The fewer pages you have to deal with, the better the overall user experience.",
    "label.welcome.adv.3.title": "Mobile Preferred",
    "label.welcome.adv.3.text": "A slush pile of statistics reveals that mobile users are more likely to rage quit out of a slow-loading site (or a site with several slow-loading pages), than desktop/laptop users, who can afford to be slightly more patient. So it should come as no surprise that single-page sites are the responsive design paradigm of choice for the mobile market.",
    "label.welcome.adv.4.title": "Stand Out From The Crowd",
    "label.welcome.adv.4.text": "Lastly, single-page sites are still not the norm. Use this to your advantage, and join the ranks of the swelling single-page crowd. Single-page design is (at least for now) associated with lean and smart startups. Use that mainstream appeal to your advantage.",
    "label.simpleView.howToCreateSimpleView": "How to create a simple view?",
    "label.simpleView.simpleView.text": "Creating simple view is very easy and very fast. All you need is to create a JavaScript view and template file. Application will automatically load when requested. Why?",
    "label.simpleView.simpleView.text2": "Because there is no predefined list of build in view. Application is automatically checking if file with view exist and view is checking if template file exist. We are only operating using <strong>URL</strong> bar.",
    "label.simpleView.simpleView.text3": "For example when we enter:",
    "label.simpleView.simpleView.text4": "Application will look for <strong>simpleView</strong> inside <strong>Examples</strong> module. Let's see how this files looks like:",
    "label.simpleView.simpleView.text5": "Result is this page. This is how fast you can create a simple view by adding only 2 files.",
    "label.jsonView.howToCreateJsonView": "How to create a JSON view?",
    "label.jsonView.text": "Now when we know how to create a simple view let me show how you can build one using JSON data. On initialization application will do an ajax call to get the data. After that we will trigger rendering an underscoreJS template with this data.",
    "label.jsonView.text2": "In this example we will use some methods inside template file. UnderscoreJS allows us to use JavaScript inside the templates. Normally Underscore use <strong><% %></strong> as a tag for code. We decided to change it to mustaches <strong>{}</strong>.",
    "label.jsonView.text3": "JSON file contains some user data. Using it we will build a table that will display every user in separate row.",
    "label.about.whoDidIt": "Who did it?",
    "label.examples.menu": "Menu",
    "label.hbs.text": "This example will show you how to use HandlebarsJS template system in our technology stack. Some of you may prefer working using them than Underscore templates.",
    "label.newLang.text": "Adding new language to hyperion is super easy. First of all you need to create an object (JSON via ajax or static JSON).",
    "label.newLang.text2": "After that we will edit language html dropdown. There is already build in method that will pick a language code and automatically request for a new language file + translate whole page without reload. In our case dropdown looks like this:",
    "label.newLang.text3": "Hyperion already have a method responsible for changing language build in. This is how it works:",
    "label.newLang.text4": "Using following method you can add a language change event to any other element in your application."

}